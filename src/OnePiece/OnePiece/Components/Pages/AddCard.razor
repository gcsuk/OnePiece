@page "/addcard"
@attribute [StreamRendering]
@rendermode InteractiveServer
@using System.IO
@using System.Text
@using System.Text.Json
@using OnePiece.Services
@using OnePiece.Models
@inject IWebHostEnvironment Environment
@inject IOpenAIVisionService OpenAIVisionService
@inject IJSRuntime JS

<PageTitle>Add Card</PageTitle>

<div class="container mt-4">
    <h1>OnePiece Card Library</h1>
    
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Select Image File</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="fileInput" class="form-label">Card Image</label>
                        <InputFile id="fileInput" class="form-control" OnChange="OnInputFileChange" accept=".jpg,.jpeg" />
                        <div class="form-text">Supported format: JPG only. Maximum size: 10MB</div>
                    </div>
                    
                                         @if (previewImageUrl != null)
                     {
                         <div class="mb-3">
                             <label class="form-label">Image Preview</label>
                             <div>
                                 <img src="@previewImageUrl" alt="Preview" class="img-thumbnail" style="max-width: 200px; max-height: 200px;" />
                             </div>
                         </div>
                         
                         <div class="mb-3">
                             <button type="button" class="btn btn-primary" @onclick="AnalyzeOnePieceCard" disabled="@isAnalyzing">
                                 @if (isAnalyzing)
                                 {
                                     <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                     <span>Analyzing...</span>
                                 }
                                 else
                                 {
                                     <span>Analyze OnePiece Card</span>
                                 }
                             </button>
                         </div>
                     }
                     
                     @if (onePieceCard != null)
                     {
                         <div class="mb-3">
                             <label class="form-label">OnePiece Card Analysis</label>
                             <div class="border rounded p-3 bg-primary bg-opacity-10">
                                 <div class="row">
                                     <div class="col-md-6">
                                         <h6>Card Name (JP):</h6>
                                         <p class="mb-2 fw-bold">@(onePieceCard.NameJapanese ?? "Not detected")</p>
                                         
                                         <h6>Card Name (EN):</h6>
                                         <p class="mb-2">@(onePieceCard.NameEnglish ?? "Not detected")</p>
                                         
                                         <h6>Card Type:</h6>
                                         <p class="mb-2">@(onePieceCard.Type ?? "Not detected")</p>
                                         
                                         <h6>Color:</h6>
                                         <p class="mb-2">@(onePieceCard.Color ?? "Not detected")</p>
                                         
                                         <h6>Power:</h6>
                                         <p class="mb-2">@(onePieceCard.Power?.ToString() ?? "Not detected")</p>
                                         
                                         <h6>Cost:</h6>
                                         <p class="mb-2">@(onePieceCard.Cost?.ToString() ?? "Not detected")</p>
                                     </div>
                                     <div class="col-md-6">
                                         <h6>Attribute:</h6>
                                         <p class="mb-2">@(onePieceCard.Attribute ?? "Not detected")</p>
                                         
                                         <h6>Set Code:</h6>
                                         <p class="mb-2">@(onePieceCard.SetCode ?? "Not detected")</p>
                                         
                                         <h6>Collector Number:</h6>
                                         <p class="mb-2">@(onePieceCard.CollectorNumber ?? "Not detected")</p>
                                         
                                         <h6>Rarity:</h6>
                                         <p class="mb-2">@(onePieceCard.Rarity ?? "Not detected")</p>
                                         
                                         <h6>Artist:</h6>
                                         <p class="mb-2">@(onePieceCard.Artist ?? "Not detected")</p>
                                     </div>
                                 </div>
                                 
                                 @if (!string.IsNullOrEmpty(onePieceCard.EffectMainJapanese))
                                 {
                                     <div class="mt-3">
                                         <h6>Main Effect (Japanese):</h6>
                                         <p class="mb-2">@onePieceCard.EffectMainJapanese</p>
                                     </div>
                                 }
                                 
                                 @if (!string.IsNullOrEmpty(onePieceCard.EffectMainEnglish))
                                 {
                                     <div class="mt-3">
                                         <h6>Main Effect (English):</h6>
                                         <p class="mb-2">@onePieceCard.EffectMainEnglish</p>
                                     </div>
                                 }
                                 
                                 @if (!string.IsNullOrEmpty(onePieceCard.EffectCounterJapanese))
                                 {
                                     <div class="mt-3">
                                         <h6>Counter Effect (Japanese):</h6>
                                         <p class="mb-2">@onePieceCard.EffectCounterJapanese</p>
                                     </div>
                                 }
                                 
                                 @if (!string.IsNullOrEmpty(onePieceCard.EffectCounterEnglish))
                                 {
                                     <div class="mt-3">
                                         <h6>Counter Effect (English):</h6>
                                         <p class="mb-2">@onePieceCard.EffectCounterEnglish</p>
                                     </div>
                                 }
                                 
                                 @if (!string.IsNullOrEmpty(onePieceCard.EffectTriggerJapanese))
                                 {
                                     <div class="mt-3">
                                         <h6>Trigger Effect (Japanese):</h6>
                                         <p class="mb-2">@onePieceCard.EffectTriggerJapanese</p>
                                     </div>
                                 }
                                 
                                 @if (!string.IsNullOrEmpty(onePieceCard.EffectTriggerEnglish))
                                 {
                                     <div class="mt-3">
                                         <h6>Trigger Effect (English):</h6>
                                         <p class="mb-2">@onePieceCard.EffectTriggerEnglish</p>
                                     </div>
                                 }
                                 
                                 @if (onePieceCard.Traits?.Any() == true)
                                 {
                                     <div class="mt-3">
                                         <h6>Traits:</h6>
                                         <p class="mb-2">@string.Join(", ", onePieceCard.Traits)</p>
                                     </div>
                                 }
                                 
                                 @if (onePieceCard.BoundingBoxes?.Any() == true)
                                 {
                                     <div class="mt-3">
                                         <h6>Text Regions:</h6>
                                         <ul class="list-unstyled">
                                             @foreach (var bbox in onePieceCard.BoundingBoxes)
                                             {
                                                 <li><small class="text-muted">@bbox.Label: (@bbox.X, @bbox.Y) - @bbox.Width√ó@bbox.Height</small></li>
                                             }
                                         </ul>
                                     </div>
                                 }
                                 
                                 @if (onePieceCard.Confidences != null)
                                 {
                                     <div class="mt-3">
                                         <h6>Confidence Scores:</h6>
                                         <div class="row">
                                             <div class="col-md-6">
                                                 <small class="text-muted">
                                                     Name: @(onePieceCard.Confidences.Name?.ToString("P0") ?? "N/A")<br/>
                                                     Type: @(onePieceCard.Confidences.Type?.ToString("P0") ?? "N/A")<br/>
                                                     Cost: @(onePieceCard.Confidences.Cost?.ToString("P0") ?? "N/A")<br/>
                                                     Color: @(onePieceCard.Confidences.Color?.ToString("P0") ?? "N/A")
                                                 </small>
                                             </div>
                                             <div class="col-md-6">
                                                 <small class="text-muted">
                                                     Effects: @(onePieceCard.Confidences.Effects?.ToString("P0") ?? "N/A")<br/>
                                                     Set Code: @(onePieceCard.Confidences.SetCode?.ToString("P0") ?? "N/A")<br/>
                                                     Collector #: @(onePieceCard.Confidences.CollectorNumber?.ToString("P0") ?? "N/A")<br/>
                                                     Rarity: @(onePieceCard.Confidences.Rarity?.ToString("P0") ?? "N/A")
                                                 </small>
                                             </div>
                                         </div>
                                     </div>
                                 }
                                 
                                 @if (!string.IsNullOrEmpty(onePieceCard.Notes))
                                 {
                                     <div class="mt-3">
                                         <h6>Notes:</h6>
                                         <p class="mb-2">@onePieceCard.Notes</p>
                                     </div>
                                 }
                                 
                                 <div class="mt-3">
                                     <button type="button" class="btn btn-success" @onclick="SaveToLibrary">
                                         <i class="bi bi-bookmark-plus"></i> Save to Library
                                     </button>
                                     <button type="button" class="btn btn-info ms-2" @onclick="ExportAsJson">
                                         <i class="bi bi-download"></i> Export JSON
                                     </button>
                                 </div>
                             </div>
                         </div>
                     }
                    
                    <div class="d-flex gap-2">
                        <button type="button" class="btn btn-primary" @onclick="HandleFileUpload" disabled="@(isUploading || selectedFile == null)">
                            @if (isUploading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Uploading...</span>
                            }
                            else
                            {
                                <span>Upload Image</span>
                            }
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="ClearForm">Clear</button>
                    </div>
                    
                    <!-- Debug info -->
                    <div class="mt-2">
                        <small class="text-muted">
                            Selected file: @(selectedFile?.Name ?? "None") | 
                            Button disabled: @(isUploading || selectedFile == null)
                        </small>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">Upload Status</h6>
                </div>
                <div class="card-body">
                    @if (uploadMessage != null)
                    {
                        <div class="alert @(isSuccess ? "alert-success" : "alert-danger") alert-dismissible fade show" role="alert">
                            @uploadMessage
                            <button type="button" class="btn-close" @onclick="() => uploadMessage = null"></button>
                        </div>
                    }
                    
                    @if (uploadedFiles.Any())
                    {
                        <h6>Recently Uploaded Files:</h6>
                        <ul class="list-unstyled">
                            @foreach (var file in uploadedFiles.Take(5))
                            {
                                <li class="mb-2">
                                    <small class="text-muted">@file</small>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("eval", @"
                window.downloadFile = function(dataUrl, fileName) {
                    const link = document.createElement('a');
                    link.href = dataUrl;
                    link.download = fileName;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                };
            ");
        }
    }
    private IBrowserFile? selectedFile;
    private string? previewImageUrl;
    private bool isUploading;
    private bool isAnalyzing;
    private string? uploadMessage;
    private bool isSuccess;
    private readonly List<string> uploadedFiles = [];
    private OnePieceCard? onePieceCard;
    
    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        try
        {
            selectedFile = e.File;
            
            // Create preview
            if (selectedFile != null)
            {
                const string format = "image/jpeg";
                var resizedImage = await selectedFile.RequestImageFileAsync(format, 200, 200);
                var buffer = new byte[resizedImage.Size];
                await resizedImage.OpenReadStream().ReadAsync(buffer);
                previewImageUrl = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            }
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle any errors during preview generation
            ShowMessage($"Error creating preview: {ex.Message}", false);
        }
    }
    
    private async Task HandleFileUpload()
    {
        if (selectedFile == null)
        {
            ShowMessage("Please select a file to upload.", false);
            return;
        }
        
        try
        {
            isUploading = true;
            StateHasChanged();
            
            // Create uploads directory if it doesn't exist
            var uploadsPath = Path.Combine(Environment.WebRootPath, "uploads");
            if (!Directory.Exists(uploadsPath))
            {
                Directory.CreateDirectory(uploadsPath);
            }
            
            // Generate unique filename
            var fileExtension = Path.GetExtension(selectedFile.Name);
            var fileName = $"{Guid.NewGuid()}{fileExtension}";
            var filePath = Path.Combine(uploadsPath, fileName);
            
            // Save file to disk
            await using var stream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit
            await using var fileStream = File.Create(filePath);
            await stream.CopyToAsync(fileStream);
            
            uploadedFiles.Insert(0, fileName);
            ShowMessage($"Image uploaded successfully! File saved as {fileName}", true);
            ClearForm();
        }
        catch (Exception ex)
        {
            ShowMessage($"Error uploading file: {ex.Message}", false);
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }
    
    private void ClearForm()
    {
        selectedFile = null;
        previewImageUrl = null;
        uploadMessage = null;
        onePieceCard = null;
        StateHasChanged();
    }
    
    private void ShowMessage(string message, bool success)
    {
        uploadMessage = message;
        isSuccess = success;
        StateHasChanged();
    }
    
    private async Task AnalyzeOnePieceCard()
    {
        if (selectedFile == null)
        {
            ShowMessage("Please select a file to analyze.", false);
            return;
        }
        
        try
        {
            isAnalyzing = true;
            StateHasChanged();
            
            // Open the file stream and analyze it with OpenAI Vision
            await using var stream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            onePieceCard = await OpenAIVisionService.AnalyzeOnePieceCardAsync(stream);
            
            ShowMessage("OnePiece card analysis completed successfully!", true);
        }
        catch (Exception ex)
        {
            ShowMessage($"Error analyzing OnePiece card: {ex.Message}", false);
            onePieceCard = null;
        }
        finally
        {
            isAnalyzing = false;
            StateHasChanged();
        }
    }
    
    private async Task SaveToLibrary()
    {
        if (onePieceCard == null)
        {
            ShowMessage("No card data to save.", false);
            return;
        }
        
        try
        {
            // Create library directory if it doesn't exist
            var libraryPath = Path.Combine(Environment.WebRootPath, "library");
            if (!Directory.Exists(libraryPath))
            {
                Directory.CreateDirectory(libraryPath);
            }
            
            // Generate filename based on card name and timestamp
            var cardName = onePieceCard.NameEnglish ?? onePieceCard.NameJapanese ?? "Unknown";
            var safeCardName = string.Join("_", cardName.Split(Path.GetInvalidFileNameChars()));
            var fileName = $"{safeCardName}_{DateTime.Now:yyyyMMdd_HHmmss}.json";
            var filePath = Path.Combine(libraryPath, fileName);
            
            // Save card data as JSON
            var jsonData = JsonSerializer.Serialize(onePieceCard, new JsonSerializerOptions { WriteIndented = true });
            await File.WriteAllTextAsync(filePath, jsonData);
            
            ShowMessage($"Card saved to library as {fileName}", true);
        }
        catch (Exception ex)
        {
            ShowMessage($"Error saving card to library: {ex.Message}", false);
        }
    }
    
    private async Task ExportAsJson()
    {
        if (onePieceCard == null)
        {
            ShowMessage("No card data to export.", false);
            return;
        }
        
        try
        {
            var jsonData = JsonSerializer.Serialize(onePieceCard, new JsonSerializerOptions { WriteIndented = true });
            var cardName = onePieceCard.NameEnglish ?? onePieceCard.NameJapanese ?? "Unknown";
            var safeCardName = string.Join("_", cardName.Split(Path.GetInvalidFileNameChars()));
            var fileName = $"{safeCardName}_{DateTime.Now:yyyyMMdd_HHmmss}.json";
            
            // Create download link
            var bytes = Encoding.UTF8.GetBytes(jsonData);
            var base64 = Convert.ToBase64String(bytes);
            var dataUrl = $"data:application/json;base64,{base64}";
            
            // Trigger download using JavaScript
            await JS.InvokeVoidAsync("downloadFile", dataUrl, fileName);
            
            ShowMessage("Card data exported successfully!", true);
        }
        catch (Exception ex)
        {
            ShowMessage($"Error exporting card data: {ex.Message}", false);
        }
    }
}
