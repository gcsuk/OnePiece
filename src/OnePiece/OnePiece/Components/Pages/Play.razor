@page "/play"
@using OnePiece.Services
@using OnePiece.Models
@inject IAzureStorageService AzureStorageService
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Play - OnePiece Card Library</PageTitle>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>ðŸŽ® Play - OnePiece Card Library</h1>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-3 text-muted">Loading your OnePiece card collection...</p>
                </div>
            }
            else
            {
                <!-- Filter Section -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">ðŸŽ¯ Select Starter Set</h5>
                    </div>
                    <div class="card-body">
                        <div class="row align-items-end">
                            <div class="col-md-6">
                                <label for="starterSetSelect" class="form-label">Starter Set</label>
                                <select id="starterSetSelect" class="form-select" @bind="selectedStarterSet">
                                    <option value="">Select a starter set...</option>
                                    @foreach (var set in availableStarterSets)
                                    {
                                        <option value="@set">@set</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-6">
                                <button class="btn btn-primary" @onclick="LoadSelectedSet" disabled="@(string.IsNullOrEmpty(selectedStarterSet) || isLoadingCards)">
                                    @if (isLoadingCards)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Loading...</span>
                                    }
                                    else
                                    {
                                        <span>ðŸŽ¯ Load Set</span>
                                    }
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                @if (filteredCards != null && filteredCards.Any())
                {
                    <div class="card">
                        <div class="card-header">
                            <h5 class="mb-0">
                                ðŸ“¦ @selectedStarterSet Set Cards 
                                <span class="badge bg-primary ms-2">@filteredCards.Count cards</span>
                            </h5>
                        </div>
                        <div class="card-body">
                            <div class="row row-cols-2 row-cols-sm-3 row-cols-md-4 row-cols-lg-5 row-cols-xl-6 g-3">
                                @foreach (var card in filteredCards)
                                {
                                    <div class="col">
                                        <button class="btn btn-outline-primary w-100 card-button" 
                                                @onclick='() => ShowCardModal(card)'>
                                            @GetCardNumber(card.SetCode)
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
                else if (!string.IsNullOrEmpty(selectedStarterSet) && !isLoadingCards)
                {
                    <div class="text-center py-5">
                        <div class="text-muted">
                            <i class="bi bi-inbox" style="font-size: 4rem;"></i>
                            <h3 class="mt-3">No Cards Found</h3>
                            <p class="lead">No cards found for starter set "@selectedStarterSet".</p>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>

<!-- Card Image Modal -->
@if (showModal && selectedCard != null)
{
    <div class="card-modal-overlay" 
         @onkeydown="HandleKeyDown"
         @onclick="CloseCardModal">
        <div class="card-modal-container" @onclick:stopPropagation="true">
            <button type="button" class="card-modal-close" 
                    @onclick="CloseCardModal" 
                    aria-label="Close">
                Ã—
            </button>
            <img src="@selectedCard.TranslatedImageUrl" 
                 alt="@selectedCard.CardNameEnglish" 
                 class="card-modal-image" />
        </div>
    </div>
}

@code {
    private List<CardMetadata>? allCards;
    private List<CardMetadata>? filteredCards;
    private List<string> availableStarterSets = new();
    private string selectedStarterSet = "";
    private bool isLoading = true;
    private bool isLoadingCards = false;
    private bool showModal = false;
    private CardMetadata? selectedCard;

    protected override async Task OnInitializedAsync()
    {
        await LoadAllCardsAsync();
    }

    private async Task LoadAllCardsAsync()
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            allCards = await AzureStorageService.GetAllCardMetadataAsync();
            ExtractStarterSets();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cards: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ExtractStarterSets()
    {
        if (allCards == null) return;

        var starterSets = new HashSet<string>();
        
        foreach (var card in allCards)
        {
            if (!string.IsNullOrEmpty(card.SetCode))
            {
                // Split by dash and take the first part (e.g., "ST01-001" -> "ST01")
                var parts = card.SetCode.Split('-');
                if (parts.Length > 0 && !string.IsNullOrEmpty(parts[0]))
                {
                    starterSets.Add(parts[0]);
                }
            }
        }

        availableStarterSets = starterSets.OrderBy(s => s).ToList();
    }

    private async Task LoadSelectedSet()
    {
        if (string.IsNullOrEmpty(selectedStarterSet) || allCards == null) return;

        try
        {
            isLoadingCards = true;
            StateHasChanged();

            // Filter cards that start with the selected starter set
            filteredCards = allCards
                .Where(c => !string.IsNullOrEmpty(c.SetCode) && c.SetCode.StartsWith(selectedStarterSet))
                .OrderBy(c => c.SetCode)
                .ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error filtering cards: {ex.Message}");
        }
        finally
        {
            isLoadingCards = false;
            StateHasChanged();
        }
    }

    private string GetCardNumber(string setCode)
    {
        if (string.IsNullOrEmpty(setCode)) return "";
        
        var parts = setCode.Split('-');
        return parts.Length > 1 ? parts[1] : "";
    }

    private string GetColorClass(string color)
    {
        return color?.ToLowerInvariant() switch
        {
            "red" => "danger",
            "blue" => "primary",
            "green" => "success",
            "purple" => "purple",
            "black" => "dark",
            "yellow" => "warning",
            _ => "secondary"
        };
    }

    private void ShowCardModal(CardMetadata card)
    {
        selectedCard = card;
        showModal = true;
        StateHasChanged();
    }

    private void CloseCardModal()
    {
        showModal = false;
        selectedCard = null;
        StateHasChanged();
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            CloseCardModal();
        }
    }
}
